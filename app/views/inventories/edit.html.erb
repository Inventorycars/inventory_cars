<div class="p-3 m-1">
  <h1 class="mt-4">Inventories</h1>
  <ol class="breadcrumb mb-4">
    <li class="breadcrumb-item"><%= link_to 'Dashboard', root_path %></li>
    <li class="breadcrumb-item active"><%= link_to 'Inventories', inventories_path %></li>
    <li class="breadcrumb-item active"><%= @inventory.id %></li>
  </ol>
  <hr>
  <div class="card mb-4">
    <div class="card-header">
      <i class="bi bi-ticket-detailed-fill me-1"></i>
      Update Inventory
    </div>
    <div class="container-fluid">
      <div class="row p-3">
        <div class="">
          <div class="card border-2 p-4 card image_urlshadow-lg rounded-lg">
            <h3 class="text-center">Update your inventory</h3>
            <hr>
            <%= form_with(model: @inventory, url: inventory_path(@inventory), method: :patch, class: "row g-3", multipart: true) do |form| %>
              <% fields = [
               [:inventory_type, "Inventory Type"],
               [:stock, "Stock"],
               # Other fields omitted for brevity
               [:transmission_gear, "Transmission Gear"]
              ] %>
              <% fields.each do |field, label| %>
                <div class="col-md-6">
                  <%= form.label field, label, class: "form-label" %>
                  <%= form.text_field field, class: "form-control text-dark" %>
                  <% if @inventory.errors.has_key?(field) %>
                    <p class="text-danger"><%= @inventory.errors[field].first %></p>
                  <% end %>
                </div>
              <% end %>

              <div class="col-md-6">
                <%= form.label :image, class: "form-label" %>
                <button type="button" class="col-md-12 p-2 form-control text-dark" onclick="document.getElementById('image_list').click()">Select Image</button>
              </div>
              <div class="d-none">
                <%= form.file_field :image_list, multiple: true, id: 'image_list', class: "form-control text-dark", onchange: "readURL(this);" %>
              </div>
              <div id="preview-container" class="col mt-2 mb-3">
                <% if @inventory.image_list.present? %>
                  <div class="image-container">
                    <% @inventory.image_list.each_with_index do |image_url, index| %>
                      <div class="col-md-3" style="text-align: center;">
                        <%= image_tag(url_for(image_url), class: "image-preview") %>
                        <button type="button" class="btn btn-info btn-sm delete" style="margin-top: 4px;" onclick="removeImage(<%= index %>, this.previousElementSibling)">Delete Image</button>
                      </div>
                    <% end %>
                  </div>
                <% end %>
              </div>

              <div class="col-12">
                <%= form.submit "Update", class: "btn btn-secondary w-100" %>
              </div>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const fileInput = document.getElementById('image_list');

    fileInput.addEventListener('change', function() {
      addImages();
    });

    // Trigger initial loading of existing images
    addImages();
  });

  document.addEventListener('DOMContentLoaded', function() {
    const fileInput = document.getElementById('image_list');
    const fileList = new DataTransfer();

    <% @inventory.image_list.each do |image| %>
      var imageUrl = "<%= rails_blob_path(image, only_path: true) %>";
      fetch(`http://localhost:3000/${imageUrl}`)
        .then(response => response.blob())
        .then(blob => {
          const file = new File([blob], "<%= image.filename %>", { type: blob.type });
          fileList.items.add(file);
          fileInput.files = fileList.files;
        });
    <% end %>

    fileInput.addEventListener('change', function() {
      if (this.files.length > 0) {
        this.files.push(files);
        this.files.push(fileInput.files);
      }
    });
  });

  function removeImage(indexId, imageElement) {
    const fileInput = document.getElementById('image_list');
    const fileList = new DataTransfer();

    for (let i = 0; i < fileInput.files.length; i++) {
      if (i !== indexId) {
        fileList.items.add(fileInput.files[i]);
      }
    }
    imageElement.parentElement.remove();

    fileInput.files = fileList.files;
  }

  function addImages() {
    const fileInput = document.getElementById('image_list');
    const fileList = new DataTransfer();

    // Add existing images
    <% @inventory.image_list.each do |image| %>
      var imageUrl = "<%= rails_blob_path(image, only_path: true) %>";
      fetch(`http://localhost:3000/${imageUrl}`)
        .then(response => response.blob())
        .then(blob => {
          const file = new File([blob], "<%= image.filename %>", { type: blob.type });
          fileList.items.add(file);
          fileInput.files = fileList.files;
        });
    <% end %>

    // Add newly selected images
    for (let i = 0; i < fileInput.files.length; i++) {
      fileList.items.add(fileInput.files[i]);
    }
    fileInput.files = fileList.files;
  }

  function readURL(input) {
    var previewContainer = document.getElementById('preview-container');
    previewContainer.innerHTML = ''; // Clear previous previews

    if (input.files && input.files.length > 0) {
      for (var i = 0; i < input.files.length; i++) {
        var reader = new FileReader();
        let image = document.createElement('img');

        reader.onload = function (e) {
          image.src = e.target.result;
          image.width = 350;
          image.height = 350; // Corrected typo: 'heigth' to 'height'
          image.style.padding = "4px";
          image.style.margin = "2px";
          previewContainer.appendChild(image);
        };
        reader.readAsDataURL(input.files[i]);
      }
    }
  }
</script>

<style>
  .image-container {
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
  }

  .image-container img {
    height: 200px; /* Set the desired height for the images */
    width: auto; /* Maintain the aspect ratio */
    object-fit: cover; /* Resize the image to cover its container */
    margin: 5px; /* Add some margin between images */
  }
</style>
